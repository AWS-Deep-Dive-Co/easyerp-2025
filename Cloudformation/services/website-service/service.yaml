Description: |
  This is an example of a long running ECS service that needs to connect to another ECS service (product-service) via it's load balancer. We use environment variables to pass the URL of the product-service to this one's container(s).

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  # S3BUCKET:
  #   Description: The S3 bucket to store data
  #   Type: String

  DockerImage:
    Description: The Docker image to use for the service
    Type: String

  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: List of public subnet ID's to put the load balancer in

  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 1

  Listener:
    Description: The Application Load Balancer listener to register with
    Type: String

  TargetGroup:
    Description: TTarget group to register
    Type: String

  Path:
    Description: The path to register with the Application Load Balancer
    Type: String
    Default: /

  ECSTaskExecutionRoleArn:
    Description: The ECS service auto scaling role ARN
    Type: String

  DBNAME:
    Description: Database name
    Type: String

  DBHOST:
    Description: Database host
    Type: String

  DBPORT:
    Description: Database port
    Type: String

  DBSECRETARN:
    Description: ARN of the Secrets Manager secret containing database credentials
    Type: String

  CSRFTrustedOrigins:
    Description: Comma-separated list of trusted origins for Django CSRF protection
    Type: String

  SecurityGroup:
    Description: Select the Security Group to use for the ECS cluster hosts
    Type: AWS::EC2::SecurityGroup::Id

Resources:
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref EnvironmentName
      Cpu: 1024
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRoleArn
      TaskRoleArn: !Ref ECSTaskExecutionRoleArn
      ContainerDefinitions:
        - Name: !Ref EnvironmentName
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${DockerImage}'
          Memory: 1024
          Cpu: 1024
          Environment:
            - Name: DBNAME
              Value: !Ref DBNAME
            - Name: DBHOST
              Value: !Ref DBHOST
            - Name: DBPORT
              Value: !Ref DBPORT
            - Name: DEVENV
              Value: 'no'
            - Name: CSRF_TRUSTED_ORIGINS
              Value: !Ref CSRFTrustedOrigins
            # - Name: AWS_S3_BUCKET_NAME
            #   Value: !Ref S3BUCKET
          Secrets:
            - Name: DBUSER
              ValueFrom: !Sub "${DBSECRETARN}:username::"
            - Name: DBPASSWORD
              ValueFrom: !Sub "${DBSECRETARN}:password::"
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref EnvironmentName
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      ServiceName: !Ref EnvironmentName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets: !Ref Subnets
      LoadBalancers:
        - ContainerName: !Ref EnvironmentName
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 7

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward


