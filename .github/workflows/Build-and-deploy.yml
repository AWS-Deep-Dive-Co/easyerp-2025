name: ECS Deployment
on:
  workflow_run:
    workflows: ["CloudFormation Deployment"]
    types:
      - completed
    branches:
      - main
      - stage
  workflow_dispatch:

jobs:
  build:
    name: Docker image generation
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    permissions:
      packages: write
      contents: read
    environment: 
      name: ${{ github.event.workflow_run.head_branch == 'main' && 'Production' || (github.ref_name == 'main' && 'Production') || 'Staging' }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.ref_name }}
          
      - name: Determine environment
        id: environment
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "env=prod" >> $GITHUB_OUTPUT
            echo "environment=Production" >> $GITHUB_OUTPUT
          else
            echo "env=stage" >> $GITHUB_OUTPUT
            echo "environment=Staging" >> $GITHUB_OUTPUT
          fi
          
      # - uses: satackey/action-docker-layer-caching@v0.0.11
      #   # Ignore the failure of a step and avoid terminating the job.
      #   continue-on-error: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        env:
          IMAGE_NAME: ${{ vars.IMAGE_NAME || 'easyerp' }}
        run: docker build --tag $IMAGE_NAME-${{ github.sha }} .
      
      # - name: Docker Build
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     tags: easyerp:prod-${{ github.sha }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      - name: List Docker images
        run: docker images
        
      
      - name: Push to ECR
        id: ecr
        uses: jwalton/gh-ecr-push@v1
        env:
          IMAGE_NAME: ${{ vars.IMAGE_NAME || 'easyerp' }}
          AWS_REGION: ${{ vars.AWS_REGION || 'us-east-2' }}
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ${{ vars.AWS_REGION || 'us-east-2' }}
          local-image: ${{ vars.IMAGE_NAME }}-${{ github.sha }}
          image: ${{ vars.IMAGE_NAME }}-${{ github.sha }}, ${{ vars.IMAGE_NAME }}-latest
      
  deploy:
    name: Deploy to ECS
    needs: build
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    environment: 
      name: ${{ github.event.workflow_run.head_branch == 'main' && 'Production' || (github.ref_name == 'main' && 'Production') || 'Staging' }}
    runs-on: ubuntu-latest
    steps:
      - name: Determine environment
        id: environment
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            if [ "${{ github.event.workflow_run.head_branch }}" = "main" ]; then
              echo "env=prod" >> $GITHUB_OUTPUT
              echo "environment=Production" >> $GITHUB_OUTPUT
            else
              echo "env=stage" >> $GITHUB_OUTPUT
              echo "environment=Staging" >> $GITHUB_OUTPUT
            fi
          else
            if [ "${{ github.ref_name }}" = "main" ]; then
              echo "env=prod" >> $GITHUB_OUTPUT
              echo "environment=Production" >> $GITHUB_OUTPUT
            else
              echo "env=stage" >> $GITHUB_OUTPUT
              echo "environment=Staging" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-2' }}
          
      - name: Deploy to ECS
        env:
          ECS_CLUSTER: ${{ vars.ECS_CLUSTER_NAME }}
          ECS_SERVICE: ${{ vars.ECS_SERVICE_NAME }}
          AWS_REGION: ${{ vars.AWS_REGION || 'us-east-2' }}
        run: |
          echo "Deploying to ECS:"
          echo "Environment: ${{ steps.environment.outputs.environment }}"
          echo "Cluster: $ECS_CLUSTER"
          echo "Service: $ECS_SERVICE"
          echo "Region: $AWS_REGION"
          
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region $AWS_REGION
          
          echo "âœ… ECS service update initiated successfully!"
          echo "ðŸš€ New deployment will pull the latest image and restart the service."
        
          
