name: ECS Deployment
on:
  push:
    branches: ["main", "stage"]
  workflow_dispatch:
  workflow_run:
    workflows: ["CloudFormation Deployment"]
    types:
      - completed
    branches:
      - main
      - stage

jobs:
  check-trigger:
    name: Determine deployment trigger
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      trigger-type: ${{ steps.check.outputs.trigger-type }}
    steps:
      - name: Check out code (for push events)
        if: ${{ github.event_name == 'push' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need at least 2 commits to compare

      - name: Check deployment trigger
        id: check
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Debug: Starting trigger check..."
          
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            # Triggered by CloudFormation workflow completion
            if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "trigger-type=cloudformation" >> $GITHUB_OUTPUT
              echo "✅ CloudFormation deployment completed successfully - proceeding with ECS deployment"
            else
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              echo "trigger-type=cloudformation-failed" >> $GITHUB_OUTPUT
              echo "❌ CloudFormation deployment failed - skipping ECS deployment"
            fi
          elif [ "${{ github.event_name }}" = "push" ]; then
            # Check if this push has CloudFormation changes
            echo "Checking for CloudFormation changes in this push..."
            
            # Check if there are changes in CloudFormation or .github directories
            if git diff --name-only HEAD~1 HEAD | grep -E "^(Cloudformation/|\.github/)" > /dev/null; then
              echo "CloudFormation or GitHub workflow changes detected"
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              echo "trigger-type=cloudformation-pending" >> $GITHUB_OUTPUT
              echo "⏳ CloudFormation changes detected - waiting for CloudFormation deployment to complete first"
            else
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "trigger-type=code-only" >> $GITHUB_OUTPUT
              echo "✅ Code-only changes detected - proceeding with ECS deployment"
            fi
          else
            # Manual trigger
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "trigger-type=manual" >> $GITHUB_OUTPUT
            echo "✅ Manual trigger - proceeding with ECS deployment"
          fi
          
          echo "Debug: Trigger check completed"
          echo "Debug: should-deploy value set"

  build:
    name: Docker image generation
    needs: check-trigger
    if: needs.check-trigger.outputs.should-deploy == 'true'
    permissions:
      packages: write
      contents: read
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref_name == 'main' && 'Production' || 'Staging' }}
    steps:
      - name: Debug job condition
        run: |
          echo "Debug: Build job started"
          echo "should-deploy value: '${{ needs.check-trigger.outputs.should-deploy }}'"
          echo "trigger-type value: '${{ needs.check-trigger.outputs.trigger-type }}'"
          echo "Condition result: ${{ needs.check-trigger.outputs.should-deploy == 'true' }}"
          
      - name: Check out code
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
          
      - name: Determine environment
        id: environment
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "env=prod" >> $GITHUB_OUTPUT
            echo "environment=Production" >> $GITHUB_OUTPUT
          else
            echo "env=stage" >> $GITHUB_OUTPUT
            echo "environment=Staging" >> $GITHUB_OUTPUT
          fi
          
      # - uses: satackey/action-docker-layer-caching@v0.0.11
      #   # Ignore the failure of a step and avoid terminating the job.
      #   continue-on-error: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        env:
          IMAGE_NAME: ${{ vars.IMAGE_NAME || 'easyerp' }}
        run: docker build --tag $IMAGE_NAME-${{ github.sha }} .
      
      # - name: Docker Build
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     tags: easyerp:prod-${{ github.sha }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      - name: List Docker images
        run: docker images
        
      
      - name: Push to ECR
        id: ecr
        uses: jwalton/gh-ecr-push@v1
        env:
          IMAGE_NAME: ${{ vars.IMAGE_NAME || 'easyerp' }}
          AWS_REGION: ${{ vars.AWS_REGION || 'us-east-2' }}
        with:
          access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          region: ${{ vars.AWS_REGION || 'us-east-2' }}
          local-image: ${{ vars.IMAGE_NAME }}-${{ github.sha }}
          image: ${{ vars.IMAGE_NAME }}-${{ github.sha }}, ${{ vars.IMAGE_NAME }}-latest
      
  deploy:
    name: Deploy to ECS
    needs: [check-trigger, build]
    if: needs.check-trigger.outputs.should-deploy == 'true'
    environment: 
      name: ${{ github.ref_name == 'main' && 'Production' || 'Staging' }}
    runs-on: ubuntu-latest
    steps:
      - name: Determine environment
        id: environment
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "env=prod" >> $GITHUB_OUTPUT
            echo "environment=Production" >> $GITHUB_OUTPUT
          else
            echo "env=stage" >> $GITHUB_OUTPUT
            echo "environment=Staging" >> $GITHUB_OUTPUT
          fi
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-2' }}
          
      - name: Deploy to ECS
        env:
          ECS_CLUSTER: ${{ vars.ECS_CLUSTER_NAME }}
          ECS_SERVICE: ${{ vars.ECS_SERVICE_NAME }}
          AWS_REGION: ${{ vars.AWS_REGION || 'us-east-2' }}
        run: |
          echo "Deploying to ECS:"
          echo "Environment: ${{ steps.environment.outputs.environment }}"
          echo "Trigger Type: ${{ needs.check-trigger.outputs.trigger-type }}"
          echo "Cluster: $ECS_CLUSTER"
          echo "Service: $ECS_SERVICE"
          echo "Region: $AWS_REGION"
          
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region $AWS_REGION
          
          echo "✅ ECS service update initiated successfully!"
          echo "🚀 New deployment will pull the latest image and restart the service."
        
          
