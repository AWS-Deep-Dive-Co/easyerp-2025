name: CloudFormation Deployment

on:
  push:
    branches:
      - main
      - stage
    paths:
      - 'Cloudformation/**'
  workflow_dispatch:

jobs:
  create-and-execute-changeset:
    name: Create and Execute Change Set
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref_name == 'main' && 'Production' || 'Staging' }}
    outputs:
      deployment-status: ${{ steps.deployment.outputs.status }}
      stack-name: ${{ steps.environment.outputs.stack_name }}
      environment: ${{ steps.environment.outputs.env }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Determine environment
        id: environment
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "env=prod" >> $GITHUB_OUTPUT
          else
            echo "env=stage" >> $GITHUB_OUTPUT
          fi
          echo "stack_name=${{ vars.STACK_NAME }}" >> $GITHUB_OUTPUT

      - name: Create Change Set
        run: |
          echo "Creating Change Set for stack: ${{ steps.environment.outputs.stack_name }}"
          echo "Environment: ${{ steps.environment.outputs.env }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          
          # Construct S3 template URL
          S3_BUCKET="${{ vars.AWS_S3_BUCKET }}"
          TEMPLATE_KEY="${{ vars.MASTER_TEMPLATE || 'Cloudformation/master.yaml' }}"
          TEMPLATE_URL="https://${S3_BUCKET}.s3.amazonaws.com/${TEMPLATE_KEY}"
          
          echo "Using template from S3: $TEMPLATE_URL"
          
          CHANGE_SET_NAME="changeset-$(date +%Y%m%d-%H%M%S)"
          
          aws cloudformation create-change-set \
            --stack-name ${{ steps.environment.outputs.stack_name }} \
            --change-set-name "$CHANGE_SET_NAME" \
            --template-url "$TEMPLATE_URL" \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameters ParameterKey=DockerImage,ParameterValue=${{ vars.IMAGE_NAME }}-latest ParameterKey=S3BUCKET,ParameterValue=${{ vars.AWS_S3_BUCKET }} ParameterKey=CertificateSecretName,ParameterValue=null
          
          echo "✅ Change Set created successfully!"
          echo "Change Set Name: $CHANGE_SET_NAME"
          
          # Wait for changeset to be ready
          echo "⏳ Waiting for changeset to be ready..."
          aws cloudformation wait change-set-create-complete \
            --stack-name ${{ steps.environment.outputs.stack_name }} \
            --change-set-name "$CHANGE_SET_NAME"
          
          echo "✅ Change Set is ready for execution"
          
          # Execute the changeset
          echo "🚀 Executing Change Set..."
          aws cloudformation execute-change-set \
            --stack-name ${{ steps.environment.outputs.stack_name }} \
            --change-set-name "$CHANGE_SET_NAME"
          
          echo "✅ Change Set execution initiated!"
          
          # Wait for stack update to complete
          echo "⏳ Waiting for stack update to complete..."
          aws cloudformation wait stack-update-complete \
            --stack-name ${{ steps.environment.outputs.stack_name }}
          
          echo "🎉 Stack update completed successfully!"
          echo "Stack: ${{ steps.environment.outputs.stack_name }}"
          echo "Environment: ${{ steps.environment.outputs.env }}"

      - name: Set deployment status
        id: deployment
        run: |
          echo "status=success" >> $GITHUB_OUTPUT
          echo "CloudFormation deployment completed successfully"
